// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";

contract MineableDEXToken is ERC20, Ownable, ReentrancyGuard, Pausable {
    using Math for uint256;

    // Total supply constants
    uint256 public constant TOTAL_SUPPLY = 10_000_000_000_000 * 10**18; // 10T tokens
    uint256 public constant MINING_REWARD_INITIAL = 500 * 10**18; // 500 tokens per mining reward
    uint256 public constant MINING_PERIOD = 1 days; // Adjust mining difficulty daily
    uint256 public constant REWARD_HALVING_PERIOD = 365 days; // Rewards halve yearly
    
    // Mining variables
    uint256 public lastMiningTime;
    uint256 public currentDifficulty;
    uint256 public minedSupply;
    mapping(address => uint256) public lastMiningTimestamp;
    mapping(bytes32 => bool) public usedNonces;

    // Staking variables
    mapping(address => uint256) public stakedBalance;
    mapping(address => uint256) public stakingStartTime;
    mapping(address => uint256) public lastRewardCalculation;
    uint256 public totalStaked;
    uint256 public rewardRate = 5; // 5% annual reward rate
    
    // Events
    event TokensMined(address indexed miner, uint256 amount, bytes32 nonce);
    event DifficultyAdjusted(uint256 newDifficulty);
    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);

    constructor() 
        ERC20("Dexter Token", "DEX") 
        Ownable(msg.sender)
    {
        currentDifficulty = 1000000; // Initial mining difficulty
        lastMiningTime = block.timestamp;
    }

    // Mining functions
    function mine(bytes32 nonce) external nonReentrant whenNotPaused {
        require(minedSupply < TOTAL_SUPPLY, "All tokens have been mined");
        require(!usedNonces[nonce], "Nonce already used");
        require(
            block.timestamp >= lastMiningTimestamp[msg.sender] + 1 minutes,
            "Must wait 1 minute between mining attempts"
        );

        // Verify mining solution
        bytes32 hash = keccak256(abi.encodePacked(msg.sender, nonce, block.timestamp));
        require(
            uint256(hash) <= type(uint256).max / currentDifficulty,
            "Invalid mining solution"
        );

        // Calculate reward
        uint256 reward = calculateMiningReward();
        require(minedSupply + reward <= TOTAL_SUPPLY, "Would exceed total supply");

        // Update state
        usedNonces[nonce] = true;
        lastMiningTimestamp[msg.sender] = block.timestamp;
        minedSupply += reward;

        // Mint rewards
        _mint(msg.sender, reward);
        
        emit TokensMined(msg.sender, reward, nonce);
        
        // Adjust difficulty if needed
        if (block.timestamp >= lastMiningTime + MINING_PERIOD) {
            adjustDifficulty();
        }
    }

    function calculateMiningReward() public view returns (uint256) {
        uint256 timeSinceStart = block.timestamp - lastMiningTime;
        uint256 halvings = timeSinceStart / REWARD_HALVING_PERIOD;
        return MINING_REWARD_INITIAL / (2 ** halvings);
    }

    function adjustDifficulty() internal {
        uint256 timeSinceLastAdjustment = block.timestamp - lastMiningTime;
        uint256 targetTimePerBlock = MINING_PERIOD;

        if (timeSinceLastAdjustment < targetTimePerBlock) {
            currentDifficulty = currentDifficulty * 110 / 100; // Increase by 10%
        } else {
            currentDifficulty = currentDifficulty * 90 / 100; // Decrease by 10%
        }

        lastMiningTime = block.timestamp;
        emit DifficultyAdjusted(currentDifficulty);
    }

    // Staking functions
    function stake(uint256 amount) external nonReentrant whenNotPaused {
        require(amount > 0, "Cannot stake 0 tokens");
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");

        // Claim any pending rewards before changing stake
        _claimRewards(msg.sender);
        
        // Transfer tokens to contract
        _transfer(msg.sender, address(this), amount);
        
        stakedBalance[msg.sender] += amount;
        stakingStartTime[msg.sender] = block.timestamp;
        lastRewardCalculation[msg.sender] = block.timestamp;
        totalStaked += amount;

        emit Staked(msg.sender, amount);
    }

    function unstake(uint256 amount) external nonReentrant {
        require(amount > 0, "Cannot unstake 0 tokens");
        require(stakedBalance[msg.sender] >= amount, "Insufficient staked balance");

        // Claim any pending rewards before unstaking
        _claimRewards(msg.sender);

        stakedBalance[msg.sender] -= amount;
        totalStaked -= amount;

        // Transfer tokens back to user
        _transfer(address(this), msg.sender, amount);

        emit Unstaked(msg.sender, amount);
    }

    function calculateRewards(address user) public view returns (uint256) {
        if (stakedBalance[user] == 0) return 0;

        uint256 timeStaked = block.timestamp - lastRewardCalculation[user];
        return (stakedBalance[user] * rewardRate * timeStaked) / (365 days * 100);
    }

    function claimRewards() external nonReentrant {
        _claimRewards(msg.sender);
    }

    function _claimRewards(address user) internal {
        uint256 rewards = calculateRewards(user);
        if (rewards > 0) {
            lastRewardCalculation[user] = block.timestamp;
            _mint(user, rewards);
            emit RewardClaimed(user, rewards);
        }
    }

    // View functions
    function getStakedBalance(address account) external view returns (uint256) {
        return stakedBalance[account];
    }

    function getMiningDifficulty() external view returns (uint256) {
        return currentDifficulty;
    }

    // Emergency functions
    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }
}
