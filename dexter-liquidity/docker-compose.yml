
services:
  dexter:
    build:
      context: .
      target: ${DOCKER_TARGET:-production}
    ports:
      - "8000:8000"
      - "9092:9090"
    env_file: .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - dexter-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  dexbrain-api:
    build:
      context: ../backend
      dockerfile: Dockerfile.api
    ports:
      - "8080:8080"
    env_file: .env
    volumes:
      - ../backend/knowledge_base:/app/knowledge_base
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - dexter-network
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - DATABASE_URL=${DATABASE_URL:-postgresql://dexter:dexter@db:5432/dexter}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dexter}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=${DB_USER:-dexter}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-dexter}
      - POSTGRES_DB=${DB_NAME:-dexter}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dexter-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dexter}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-dexter}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dexter-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.44.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9093:9090"
    networks:
      - dexter-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:9.5.2
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    networks:
      - dexter-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

  node-exporter:
    image: prom/node-exporter:v1.5.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - dexter-network
    ports:
      - "9100:9100"

networks:
  dexter-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: